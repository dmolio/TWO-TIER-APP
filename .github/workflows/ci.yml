name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE: dmolio/nodeapp
  NODE_VERSION: '18'
  MYSQL_ROOT_PASSWORD: P@ss
  MYSQL_DATABASE: sql_login

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: P@ssw0rd
          MYSQL_DATABASE: sql_login
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './APP-CODE/node_project/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./APP-CODE/node_project
        run: npm install
          
      - name: Run tests
        working-directory: ./APP-CODE/node_project
        env:
          DATABASE_HOST: localhost
          DATABASE_USER: root
          DATABASE_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          DATABASE: ${{ env.MYSQL_DATABASE }}
        run: npm test

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./APP-CODE/node_project
          push: false
          load: true
          tags: |
            dmolio/nodeapp:${{ github.sha }}
            dmolio/nodeapp:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.56.1

      - name: Run Trivy vulnerability scanner with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            trivy image --no-progress --exit-code 1 \
              --ignore-unfixed \
              --severity HIGH,CRITICAL \
              --format table \
              dmolio/nodeapp:${{ github.sha }}
          
      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push dmolio/nodeapp:${{ github.sha }}
          docker push dmolio/nodeapp:latest

  notify:
    name: Notify on Status
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify Success
        if: ${{ success() }}
        run: |
          echo "Pipeline completed successfully!"
          
      - name: Notify Failure
        if: ${{ failure() }}
        run: |
          echo "Pipeline failed!"