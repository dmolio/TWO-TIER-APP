name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: P@ssw0rd
          MYSQL_DATABASE: sql_login
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      sonarqube:
        image: sonarqube:8.9-community
        ports:
          - 9000:9000

    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Install Dependencies
      working-directory: ./APP-CODE/node_project
      run: npm install
        
    - name: Run Tests
      working-directory: ./APP-CODE/node_project
      env:
        DATABASE_HOST: localhost
        DATABASE_USER: root
        DATABASE_PASSWORD: P@ssw0rd
        DATABASE: sql_login
      run: npm test

    - name: Wait for SonarQube to start
      run: |
        timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:9000)" != "200" ]]; do sleep 5; done'
        sleep 30
        # Create authentication token
        curl -X POST -u admin:admin "http://localhost:9000/api/user_tokens/generate" \
          -d "name=ci-token" -o token.json || true
        echo "SONAR_TOKEN=$(cat token.json | jq -r '.token')" >> $GITHUB_ENV

    - name: SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
      run: |
        npm install -g sonarqube-scanner
        sonar-scanner \
          -Dsonar.host.url=http://localhost:9000 \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.projectKey=node-app \
          -Dsonar.projectName=node-app \
          -Dsonar.sources=./APP-CODE/node_project \
          -Dsonar.exclusions=**/node_modules/**,**/*.test.js \
          -Dsonar.javascript.lcov.reportPaths=./APP-CODE/node_project/coverage/lcov.info
        
    - name: Build Docker image
      working-directory: ./APP-CODE/node_project
      run: docker build -t ${{ env.DOCKER_USERNAME }}/nodeapp:${{ github.sha }} .
        
    - name: Trivy vulnerability scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_USERNAME }}/nodeapp:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL'
        
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
        
    - name: Push to DockerHub
      run: docker push ${{ env.DOCKER_USERNAME }}/nodeapp:${{ github.sha }}

    - name: Install jq
      run: sudo apt-get install -y jq